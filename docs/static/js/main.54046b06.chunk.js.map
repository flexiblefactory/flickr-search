{"version":3,"sources":["FlickrPhoto.js","FlickrAPI.js","App.js","serviceWorker.js","index.js"],"names":["FlickrPhoto","src","title","media","description","tags","author","style","display","backgroundColor","width","height","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","color","margin","position","bottom","padding","flickr","Flickr","toUrl","farm","server","id","secret","FlickrAPI","photos","query","page","pageSize","this","getNextPage","search","safe_search","split","join","per_page","result","response","JSON","parse","text","photo","map","p","decorate","observable","api","onScroll","e","document","getElementsByTagName","Math","floor","abs","scrollHeight","scrollTop","clientHeight","infiniteScrollEffect","window","addEventListener","removeEventListener","observer","React","useEffect","useState","setQuery","className","onSubmit","preventDefault","type","value","onChange","target","i","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAiCeA,G,MA/BK,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,EAAeC,MAAf,EAAsBC,YAAtB,EAAmCC,KAAnC,EAAyCC,OAAzC,OAClB,yBAAKC,MAAO,CACVC,QAAS,eACTC,gBAAiB,QACjBC,MAAO,QACPC,OAAQ,QACRC,gBAAgB,OAAD,OAASX,EAAT,KACfY,iBAAkB,YAClBC,mBAAoB,SACpBC,eAAgB,UAChBC,MAAO,QACPC,OAAQ,OACRC,SAAU,aAEV,yBAAKX,MAAO,CACVC,QAAS,eACTC,gBAAiB,iBACjBC,MAAO,QACPQ,SAAU,WACVC,OAAQ,IACRC,QAAQ,SAEPlB,M,yECpBDmB,EAAS,IAAIC,IADI,oCAEjBC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,GAAIC,EAArB,EAAqBA,OAArB,4BACGH,EADH,6BAC4BC,EAD5B,YACsCC,EADtC,YAC4CC,EAD5C,SAGRC,E,iDACJC,OAAS,G,KACTC,MAAQ,Q,KACRC,KAAO,E,KACPC,SAAW,G,mDACJF,GACLG,KAAKH,MAAQA,EACbG,KAAKF,KAAO,EACZE,KAAKJ,OAAS,GACdI,KAAKC,gB,qHAGLD,KAAKF,O,mBACgBV,EAAOQ,OAAOM,OAAO,CACxCC,YAAa,EACb/B,KAAM4B,KAAKH,MAAMO,MAAM,KAAKC,KAAK,KACjCC,SAAUN,KAAKD,SACfD,KAAME,KAAKF,Q,OAJPS,E,OAMAC,EAAWC,KAAKC,MAAMH,EAAOI,MACnCX,KAAKJ,OAAL,sBAAkBI,KAAKJ,QAAvB,YAAkCY,EAASZ,OAAOgB,MAAMC,KAAI,SAAAC,GAAC,sBAAUA,EAAV,CAAa9C,IAAKsB,EAAMwB,U,wDAG1EC,cAASpB,EAAW,CAAEC,OAAQoB,IAAYnB,MAAOmB,M,QCzB1DC,EAAM,IAAItB,EAEVuB,EAAW,WACf,IAAMC,EAAIC,SAASC,qBAAqB,QAAQ,GAEtB,IADbC,KAAKC,MAAMD,KAAKE,IAAIL,EAAEM,aAAeN,EAAEO,UAAYP,EAAEQ,gBAGhEV,EAAIhB,eAIF2B,EAAqB,WAEzB,OADAC,OAAOC,iBAAiB,SAAUZ,GAC3B,WACLW,OAAOE,oBAAoB,SAAUb,KA4B1Bc,eAxBH,WACVC,IAAMC,UAAUN,EAAsB,IADtB,MAEUK,IAAME,SAAS,SAFzB,mBAETtC,EAFS,KAEFuC,EAFE,KAGhB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,0BAAMC,SAAU,SAACnB,GACfA,EAAEoB,iBACFtB,EAAIf,OAAOL,KAEX,2BAAOvB,MAAO,CAAEG,MAAO,SAAW+D,KAAK,OAAOC,MAAO5C,EAAO6C,SAAU,SAAAvB,GAAC,OAAIiB,EAASjB,EAAEwB,OAAOF,UAC7F,6BACE,4BAAQJ,UAAU,SAASG,KAAK,UAAhC,qBAMN,yBAAKH,UAAU,gBACZpB,EAAIrB,OAAOiB,KAAI,SAACC,EAAG8B,GAAJ,OAAU,kBAAC,EAAD,eAAaC,IAAKD,GAAO9B,YC/BvCgC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAU/B,SAASgC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.54046b06.chunk.js","sourcesContent":["import React from 'react';\n\nconst FlickrPhoto = ({ src, title, media, description, tags, author }) =>\n  <div style={{\n    display: 'inline-table',\n    backgroundColor: 'black',\n    width: '500px',\n    height: '500px',\n    backgroundImage: `url(${src})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    backgroundSize: 'contain',\n    color: 'white',\n    margin: '10px',\n    position: 'relative'\n  }}>\n    <div style={{\n      display: 'inline-table',\n      backgroundColor: 'rgba(0,0,0,.5)',\n      width: '460px',\n      position: 'absolute',\n      bottom: '0',\n      padding:'20px'\n    }}>\n      {title}\n    </div>\n  </div>\n\n{/* <i>by {author}</i>\n<p dangerouslySetInnerHTML={{ __html: description }} ></p>\n<h2>Tags:</h2>\n{tags} */}\n\nexport default FlickrPhoto","import Flickr from 'flickr-sdk'\nimport { decorate, computed, observable } from 'mobx'\n\nconst FLICKR_API_KEY = 'd5b502cd8d28ab103b7048c244cf3f56';\nconst flickr = new Flickr(FLICKR_API_KEY);\nconst toUrl = ({ farm, server, id, secret }) =>\n  `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n\nclass FlickrAPI {\n  photos = []\n  query = 'trees'\n  page = 0\n  pageSize = 12\n  search(query) {\n    this.query = query\n    this.page = 0\n    this.photos = []\n    this.getNextPage()\n  }\n  async getNextPage() {\n    this.page++\n    const result = await flickr.photos.search({\n      safe_search: 1,\n      tags: this.query.split(' ').join(','),\n      per_page: this.pageSize,\n      page: this.page\n    })\n    const response = JSON.parse(result.text)\n    this.photos = [...this.photos, ...response.photos.photo.map(p => ({ ...p, src: toUrl(p) }))]\n  }\n}\nexport default decorate(FlickrAPI, { photos: observable, query: observable })","import React from 'react';\nimport './App.css';\nimport FlickrPhoto from './FlickrPhoto';\nimport FlickrAPI from './FlickrAPI';\nimport { observer } from 'mobx-react'\n\nconst api = new FlickrAPI()\n\nconst onScroll = () => {\n  const e = document.getElementsByTagName('html')[0];\n  const diff = Math.floor(Math.abs(e.scrollHeight - e.scrollTop - e.clientHeight))\n  const atBottom = diff === 0\n  if (atBottom) {\n    api.getNextPage()\n  }\n}\n\nconst infiniteScrollEffect=() => {\n  window.addEventListener('scroll', onScroll);\n  return () => {\n    window.removeEventListener('scroll', onScroll);\n  }\n}\n\nconst App = () => {\n  React.useEffect(infiniteScrollEffect, [])\n  const [query, setQuery] = React.useState('trees')\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={(e) => {\n          e.preventDefault()\n          api.search(query);\n        }}>\n          <input style={{ width: '144px' }} type=\"text\" value={query} onChange={e => setQuery(e.target.value)} />\n          <div>\n            <button className='search' type=\"submit\"  >\n              Flickr search!\n            </button>\n          </div>\n        </form>\n      </header>\n      <div className=\"content-pane\">\n        {api.photos.map((p, i) => <FlickrPhoto key={i} {...p}></FlickrPhoto>)}\n      </div>\n    </div>\n  );\n}\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App  />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}